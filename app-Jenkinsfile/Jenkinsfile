pipeline {
    agent any

    environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}
    stages {

      stage('Docker Login') {
            steps {
              sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }


      stage('Build & push Dockerfile (CI)') {
            steps {
		     
		   
              sh """
              cd Ansible-Playbooks
              ansible-playbook build-container.yml
              """
	    }
      }

      stage('Update-kubeconfig') {
            steps {
              
               // withCredentials([[
               //   $class: 'AmazonWebServicesCredentialsBinding',
                //  credentialsId: "aws-credentials",
                //  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                //  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                //  ]]) {
                  sh """
                  aws eks --region us-east-1 update-kubeconfig --name eks-cluster
                  """
                }
	    }
      }
        


       stage('Deploy the App (CD)') {
        	steps {
             
              //  withCredentials([[
               //   $class: 'AmazonWebServicesCredentialsBinding',
               //   credentialsId: "aws-credentials",
               //   accessKeyVariable: 'AWS_ACCESS_KEY_ID',
               //   secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
               //   ]]) {
                  	sh """
                  		cd app-k8s
		        	kubectl -n app apply -f *
                  	"""
                 	sleep(time: 10, unit: "SECONDS")
		}
	    }
                
      }
			//kubectl create namespace app

      stage('Return APP URL') {
          steps {
            
             // withCredentials([[
             //   $class: 'AmazonWebServicesCredentialsBinding',
              //  credentialsId: "aws-credentials",
              //  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              //  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
              //  ]]) {
                sh "aws elb describe-load-balancers | grep DNSName"
              
          
       }
            }
      // }
          //  }

      // }       
    
